// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: test/basic.proto

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BasicMessage_GetMsg_FullMethodName = "/basic.BasicMessage/GetMsg"
)

// BasicMessageClient is the client API for BasicMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicMessageClient interface {
	GetMsg(ctx context.Context, in *SendMsg, opts ...grpc.CallOption) (*ReturnMsg, error)
}

type basicMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicMessageClient(cc grpc.ClientConnInterface) BasicMessageClient {
	return &basicMessageClient{cc}
}

func (c *basicMessageClient) GetMsg(ctx context.Context, in *SendMsg, opts ...grpc.CallOption) (*ReturnMsg, error) {
	out := new(ReturnMsg)
	err := c.cc.Invoke(ctx, BasicMessage_GetMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicMessageServer is the server API for BasicMessage service.
// All implementations must embed UnimplementedBasicMessageServer
// for forward compatibility
type BasicMessageServer interface {
	GetMsg(context.Context, *SendMsg) (*ReturnMsg, error)
	mustEmbedUnimplementedBasicMessageServer()
}

// UnimplementedBasicMessageServer must be embedded to have forward compatible implementations.
type UnimplementedBasicMessageServer struct {
}

func (UnimplementedBasicMessageServer) GetMsg(context.Context, *SendMsg) (*ReturnMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsg not implemented")
}
func (UnimplementedBasicMessageServer) mustEmbedUnimplementedBasicMessageServer() {}

// UnsafeBasicMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicMessageServer will
// result in compilation errors.
type UnsafeBasicMessageServer interface {
	mustEmbedUnimplementedBasicMessageServer()
}

func RegisterBasicMessageServer(s grpc.ServiceRegistrar, srv BasicMessageServer) {
	s.RegisterService(&BasicMessage_ServiceDesc, srv)
}

func _BasicMessage_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicMessageServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicMessage_GetMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicMessageServer).GetMsg(ctx, req.(*SendMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicMessage_ServiceDesc is the grpc.ServiceDesc for BasicMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basic.BasicMessage",
	HandlerType: (*BasicMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMsg",
			Handler:    _BasicMessage_GetMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/basic.proto",
}
